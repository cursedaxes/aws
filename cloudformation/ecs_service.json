{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Pattern 2 - Service create with autoscaling and task definition with ALB",
  "Parameters": {
    "EcsClusterName": {
      "Type": "String",
      "Description": "Specifies the ECS Cluster Name with which the resources would be associated\n",
      "Default": "mysample"
    },
    "TaskDefinitionName": {
      "Type": "String",
      "Description": "format taskdefination:version",
      "MinLength": "1",
      "Default": ""
    },
    "ECSServiceRoleARN": {
      "Type": "String",
      "Description": "ServiceRole ARN",
      "MinLength": "1",
      "Default": ""
    },
    "ECSAutoscalingRoleARN": {
      "Type": "String",
      "Description": "AutoscalingRole ARN",
      "MinLength": "1",
      "Default": ""
    },
    "ThresholdHight": {
      "MinValue": "50",
      "Type": "Number",
      "Default": "80",
      "Description": "Threshold Hight value in Percent"
    },
    "ThresholdLow": {
      "MinValue": "25",
      "Type": "Number",
      "Default": "50",
      "Description": "Threshold Low value in Percent"
    },
    "LaunchType": {
      "AllowedValues": [
        "EC2",
        "FARGATE"
      ],
      "Default": "EC2",
      "Type": "String",
      "Description": "The launch type on which to run your service. If one is not specified, EC2 will be used by default. Valid values include EC2 and FARGATE"
    },
    "EnvironmentName": {
      "AllowedValues": [
        "dev",
        "prod"
      ],
      "Default": "dev",
      "Description": "Environment for the cluster. Ex: dev, qa ,staging, prod",
      "MaxLength": "50",
      "MinLength": "1",
      "Type": "String"
    },
    "AppName": {
      "Description": "Name of app",
      "MaxLength": "50",
      "MinLength": "1",
      "Type": "String",
      "Default": "umgmt"
    },
    "ECSServiceDesiredCapacity": {
      "MinValue": "1",
      "Type": "Number",
      "Default": "1"
    },
    "ECSServiceMinSize": {
      "MinValue": "1",
      "Type": "Number",
      "Default": "1"
    },
    "ECSServiceMaxSize": {
      "MinValue": "1",
      "Type": "Number",
      "Default": "1"
    },
    "ALBTargetGroupARN": {
      "Type": "String",
      "Default": "",
      "MinLength": "1",
      "Description": "ALB Target Group ARN"
    },
    "ALBContainerPort": {
      "Type": "String",
      "Default": "80",
      "Description": "ALB Container Port which port application is running"
    }
  },
  "Resources": {
    "service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsClusterName"
        },
        "DesiredCount": {
          "Ref": "ECSServiceDesiredCapacity"
        },
        "LaunchType": {
          "Ref": "LaunchType"
        },
        "LoadBalancers": [
          {
            "ContainerName": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "EnvironmentName"
                  },
                  "-ecs-asg-",
                  {
                    "Ref": "AppName"
                  },
                  "-app"
                ]
              ]
            },
            "ContainerPort": {
              "Ref": "ALBContainerPort"
            },
            "TargetGroupArn": {
              "Ref": "ALBTargetGroupARN"
            }
          }
        ],
        "Role": {
          "Ref": "ECSServiceRoleARN"
        },
        "TaskDefinition": {
          "Fn::Join": [
            "",
            [
              "arn:aws:ecs:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":task-definition/",
              {
                "Ref": "TaskDefinitionName"
              }
            ]
          ]
        }
      }
    },
    "ServiceScalingTarget": {
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
      "DependsOn": "service",
      "Properties": {
        "MaxCapacity": {
          "Ref": "ECSServiceMaxSize"
        },
        "MinCapacity": {
          "Ref": "ECSServiceMinSize"
        },
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "service/",
              {
                "Ref": "EcsClusterName"
              },
              "/",
              {
                "Fn::GetAtt": [
                  "service",
                  "Name"
                ]
              }
            ]
          ]
        },
        "RoleARN": {
          "Ref": "ECSAutoscalingRoleARN"
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs"
      }
    },
    "ServiceAutoScalingPolicyScaleDown": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "AStepPolicyScaleDown",
        "PolicyType": "StepScaling",
        "ScalingTargetId": {
          "Ref": "ServiceScalingTarget"
        },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "MinAdjustmentMagnitude": 1,
          "Cooldown": 300,
          "MetricAggregationType": "Average",
          "StepAdjustments": [
            {
              "MetricIntervalUpperBound": 0.0,
              "ScalingAdjustment": -50
            }
          ]
        }
      }
    },
    "ServiceAutoScalingPolicyScaleUp": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "AStepPolicyScaleUp",
        "PolicyType": "StepScaling",
        "ScalingTargetId": {
          "Ref": "ServiceScalingTarget"
        },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "MinAdjustmentMagnitude": 1,
          "Cooldown": 300,
          "MetricAggregationType": "Average",
          "StepAdjustments": [
            {
              "MetricIntervalLowerBound": 0.0,
              "ScalingAdjustment": 100
            }
          ]
        }
      }
    },
    "CPUUtilizationAlarmLow": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServiceAutoScalingPolicyScaleDown"
          }
        ],
        "AlarmDescription": "Alarm if CPUUtilization less",
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "EcsClusterName"
            }
          },
          {
            "Name": "ServiceName",
            "Value": {
              "Fn::GetAtt": [
                "service",
                "Name"
              ]
            }
          }
        ],
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ECS",
        "Period": "300",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ThresholdLow"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CPUUtilizationAlarmHigh": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ServiceAutoScalingPolicyScaleUp"
          }
        ],
        "AlarmDescription": "Alarm if CPUUtilization higher",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "EcsClusterName"
            }
          },
          {
            "Name": "ServiceName",
            "Value": {
              "Fn::GetAtt": [
                "service",
                "Name"
              ]
            }
          }
        ],
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ECS",
        "Period": "300",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ThresholdHight"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    }
  },
  "Outputs": {
    "ecsservice": {
      "Value": {
        "Ref": "service"
      }
    }
  }
}
